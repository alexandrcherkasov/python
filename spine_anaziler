import numpy as np
import cv2 as cv
import graphviz as gv
import sys
import math
import pylab
import matplotlib
import os
import cv2
import imutils
from math import sqrt
from math import pi
from scipy.spatial import ConvexHull
from collections import namedtuple
from matplotlib import mlab


class spine_analizer:
    def __init__(self, img):
        self.img = cv.imread(img)
        # cv.imwrite("OriginalImage.png", self.img)
        hsv = cv.cvtColor(self.img, cv.COLOR_BGR2GRAY)
        # cv.imwrite("binary.png",hsv)
        # self.angle = []
        # self.neutral = []
        # self.intersection_point = []
        self.contours, hierarchy = cv.findContours(hsv, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)
        self.contours = np.array(self.contours)
        # self.contours = self.contours[0] if imutils.is_cv2() else self.contours[1]
        self.lengtn = len(self.contours)
        self.box = np.zeros((self.lengtn, 4, 2))
        self.center = np.zeros((self.lengtn, 2))
        for i in range(self.lengtn):
            cnt = self.contours[i]
            rect = cv.minAreaRect(cnt)
            box = cv.boxPoints(rect)
            center, wh, rot = rect
            # box = np.int0(box)
            # print(type(box),box.shape)
            # center = np.int0(center)
            self.center[i] = center
            # print(type(center),center.shape)
            # rot = np.int0(rot)
            # print(type(rot),rot.shape)
            """Прямоугольники у которых первоначальная координата находится в правом нижнем углу,у них высота больше,чем длина, соответственно таким образом переопределяем эти координаты,меняя их местами"""
            if (wh[1] >= wh[0]):
                tmp0, tmp1, tmp2, tmp3 = box[0].copy(), box[1].copy(), box[2].copy(), box[3].copy()
                # print ('--------------\n',i,box)
                # print (tmp0, tmp1, tmp2, tmp3)
                box[0], box[1], box[2], box[3] = tmp1, tmp2, tmp3, tmp0
                print(box, tmp0)
            self.box[i] = box

    def calculate_angle(self):
        # num = 0
        angles_list = []
        div_list = []
        for bx in self.box:
            # cnt = cnts[i]
            # rect = cv.minAreaRect(cnt)
            # box = cv.boxPoints(rect)
            # center, wh, rot = rect
            # print(rot,box,type(box))
            # box_transposed = box.transpose()
            # y_box = box_transposed[1]
            first_point, second_point = bx[0], bx[3]
            down_side_vect = first_point - second_point
            norm = sqrt(down_side_vect[0] ** 2 + down_side_vect[1] ** 2)
            down_side_vect /= norm
            # print('vect',down_side_vect,down_side_vect[1],down_side_vect[1]*180/pi)
            print('vect', down_side_vect[1] * 180 / pi)
            angles_list.append(down_side_vect[1] * 180 / pi)
        self.angle = np.array(angles_list)
        for i in range(self.lengtn):
            div_list.append(self.center[0][0] - self.center[i][0])
            cv.putText(self.img, "%f" % self.angle[i],
                       (np.float32(self.center[i][0] + 100), np.float32(self.center[i][1])), cv.FONT_HERSHEY_SIMPLEX, 1,
                       (0, 0, 255),
                       1)
        # div_list_array = np.array(div_list)
        # cv.imshow('drawKobb', self.img)
        # pylab.xlabel("номер позвонка")
        # pylab.ylabel("угол наклона")
        # pylab.plot(range(self.lengtn), self.angle)
        # pylab.show()
        # pylab.xlabel("номер позвонка")
        # pylab.ylabel("отклонение от центральной оси")
        # pylab.plot(range(self.lengtn), div_list_array)
        # pylab.show()
        # cv.imwrite("newAngle.png", self.img)
        # cv.waitKey()
        # cv.destroyAllWindows()

        ####for i in range(self.lengtn)

    # print('fisrt second_num',first_point,inum_second_point)
    # box = np.int0(box)
    # center = np.int0(center)
    # rot = np.int0(rot)

    def calculate_neutral_kink(self):
        curr_angle = 0.
        pred_angle = 0.
        neutral_list = []
        kink_list = []
        lneutral = False
        lkink = False
        for i, angle in enumerate(self.angle):
            print(i, angle, math.fabs(pred_angle), math.fabs(angle), not lneutral)
            if i > 0 and not lneutral and math.fabs(pred_angle) > math.fabs(angle):
                neutral_list.append(i - 1)
                lneutral = True
                print('lneutral')
            if i > 0 and lneutral and math.fabs(pred_angle) < math.fabs(angle):
                kink_list.append(i - 1)
                lneutral = False
                print('kink')
                print(lneutral)
            pred_angle = angle
        print(neutral_list, kink_list)
        self.neutral = np.array(neutral_list)
        self.kink = np.array(kink_list)

    def calculate_scoliosis_angle_Kobb(self):
        print("CALCULATE SCOLIOSIS ANGLE KOBB")
        scoliosis_angle_list = []
        intersection_list = []
        # self.intersection_point = np.zeros(len(self.kink), 2)
        for i in range(len(self.neutral) - 1):
            ilower = self.neutral[i]
            iupper = self.neutral[i + 1]
            print('\n\ni=', i, 'lower, upper = ', ilower, iupper)
            # нижние точки
            dpoint1, dpoint2 = self.box[ilower][0], self.box[ilower][3]
            print('lower points: ', dpoint1, dpoint2)
            # верхние точки
            upoint1, upoint2 = self.box[iupper][1], self.box[iupper][2]
            print('upper points: ', upoint1, dpoint2)
            xu1, yu1 = tuple(upoint1)
            xu2, yu2 = tuple(upoint2)
            xd1, yd1 = tuple(dpoint1)
            xd2, yd2 = tuple(dpoint2)
            # print(spoint1,xr1,yr1)
            """"Вычисляем угол наклона прямой"""
            # Угловой коэффициент
            ad = (yd2 - yd1) / (xd2 - xd1)
            """Точка пересечения прямой с осью Y"""
            bd = yd1 - ad * xd1
            print('check1')
            """"kx+m"""
            print(yd1, ad * xd1 + bd)
            print(yd2, ad * xd2 + bd)
            """Точка пересечения прямой с осью Y"""
            au1 = (yu2 - yu1) / (xu2 - xu1)
            bu1 = yu1 - au1 * xu1
            print('check2')
            """"kx+m"""
            print(yu1, au1 * xu1 + bu1)
            print(yu2, au1 * xu2 + bu1)
            x_intersect = (bd - bu1) / (au1 - ad)
            y_intersect = ad * x_intersect + bd
            intersection_list.append(np.array([x_intersect, y_intersect]))
            print(dpoint1, dpoint2, ad, bd)
            print(upoint1, upoint2, au1, bu1)
            print("Intersection point=", intersection_list)
            """Считается вектор"""
            vf = np.array([xd1 - xd2, yd1 - yd2])
            vs = np.array([xu1 - xu2, yu1 - yu2])
            normf = math.sqrt(vf[0] ** 2 + vf[1] ** 2)
            norms = math.sqrt(vs[0] ** 2 + vs[1] ** 2)
            vf /= normf
            vs /= norms
            """Высчитывается угол"""
            angle = math.acos(vf[0] * vs[0] + vf[1] * vs[1])
            if angle > pi / 2:
                angle = pi - angle
            print('angle = ', angle, angle * 180 / pi)
            scoliosis_angle_list.append(angle * 180 / pi)
        self.scoliosis_angle_Kobb = np.array(scoliosis_angle_list)
        self.Kobb_intersection = intersection_list
        print("INTERSECTION LIST", intersection_list)

    def calculate_scoliosis_angle_Ferguson(self):
        # Вычисление угла сколиоза по методу Фергюссона
        # Результат: углы, вычисленные по методу Фергюссона
        # Нижняя вершина, верхняя вершина, середина
        # вектор от нижнего в центр среднего,вектор от среднего в центр верхнего
        scoliosis_angle_list = []
        print("MYBOXCENTER=", self.center)
        for i in range(len(self.neutral) - 1):
            # print('\n\nFERG i=', i, 'lower, upper = ', ilower, iupper)
            print("SELF NEUTRAL I=", self.neutral[i])
            print("SELF NEUTRAL I+1=", self.neutral[i + 1])
            ilower = self.neutral[i]
            iupper = self.neutral[i + 1]
            print('\n\nFERG i=', i, 'lower, upper = ', ilower, iupper)
            icenter = self.kink[i]
            print("ICENTER=", icenter)
            # icenter = np.int0(icenter)
            print("True ICENTER=", icenter)
            # vector center upper to
            dpoint1, dpoint2 = self.center[ilower][0], self.center[ilower][1]
            cpoint1, cpoint2 = self.center[icenter][0], self.center[icenter][1]
            upoint1, upoint2 = self.center[iupper][0], self.center[iupper][1]
            print("DPOINT1=", dpoint1, "DPOINT2=", dpoint2)
            print("CPOINT1=", cpoint1, "CPOINT2=", cpoint2)
            print("UPOINT1=", upoint1, "UPOINT2=", upoint2)
            """A"""
            vect_x = dpoint1 - cpoint1  # a1
            vect_y = dpoint2 - cpoint2  # a2
            print("vect1=", vect_x, vect_y)
            """B"""
            # vect_xx = upoint1 - cpoint1#b1
            # vect_yy = upoint2 - cpoint2#b2
            vect_xx = upoint1 - cpoint1
            vect_yy = upoint2 - cpoint2
            print("vect2=", vect_xx, vect_yy)
            cos = vect_x * vect_xx + vect_y * vect_yy
            cos2 = math.sqrt(vect_x * vect_x + vect_y * vect_y) * math.sqrt(vect_xx * vect_xx + vect_yy * vect_yy)
            angle = math.acos(cos / cos2)
            if angle > pi / 2:
                angle = pi - angle
            print('angle = ', angle, angle * 180 / pi)
            scoliosis_angle_list.append(angle * 180 / pi)
        self.scoliosis_angle_Fergusson = np.array(scoliosis_angle_list)

    def calculate_scoliosis_severity(self, angle_type='Kobb'):
        # Вычисление степени сколиоза
        # Вычисляется сумма углов сколиоза, по ним вычисляется степень
        KobbAngle = max(self.scoliosis_angle_Kobb)
        FergAngle = max(self.scoliosis_angle_Fergusson)
        Kink_type = len(self.kink)
        K = 0
        F = 0
        print("KOBB ANGLE=", KobbAngle)
        print("FERG ANGLE=", FergAngle)
        if KobbAngle <= 10:
            print("FIRST RATE Kobb")
            K = 1
        elif KobbAngle >= 11 or KobbAngle <= 25:
            print("SECOND RATE Kobb")
            K = 2
        elif KobbAngle >= 26 or KobbAngle <= 40:
            print("THEERD RATE Kobb")
            K = 3
        elif KobbAngle >= 41:
            print("FOURTH RATE Kobb")
            K = 4

        if FergAngle <= 10:
            print("FIRST RATE Ferg")
            F = 1
        elif FergAngle >= 11 or FergAngle <= 25:
            print("SECOND RATE Ferg")
            F = 2
        elif FergAngle >= 26 or FergAngle <= 40:
            print("THEERD RATE Ferg")
            F = 3
        elif FergAngle >= 41:
            print("FOURTH RATE Ferg")
            F = 4
        if Kink_type == 1:
            print("C Type")
        elif Kink_type == 2:
            print("S Type")
        elif Kink_type == 3:
            print("Z Type")

        print("CALCULATE SCOLIOSIS SEVERITY=", KobbAngle, FergAngle)

    def draw(self):
        # print(self.center)
        # print(self.center[0][0])
        # a = self.center[0][0]
        # b = self.center[0][1]
        # a,b = np.int0(a),np.int0(b)
        # cv.line(self.img,(a,b),(a,b-1000),(76,76,76),2)
        # for i in range(self.lengtn):
        #     box = self.box[i]
        #     box = np.int0(box)
        #     center = self.center[i]
        for i in range(self.lengtn):
            box = self.box[i]
            box = np.int0(box)
            for j in range(len(self.neutral)):
                print("i=====", i)
                if i == self.neutral[j]:
                    cv.drawContours(self.img, [box], 0, (76, 76, 76), 3)

        cv.drawContours(self.img, [box], 0, (76, 76, 76), 2)

        #     cv.drawContours(self.img, [box], 0, (76, 76, 75), 2)
        cv.imshow('Contours Image', self.img)
        cv.imwrite("Neutral.png", self.img)
        cv.waitKey()
        cv.destroyAllWindows()

    def drawNeutral(self):
        """ОТРИСОВКА НЕЙТРАЛЬНЫХ ПОЗВОНКОВ"""
        for i in range(self.lengtn):
            box = self.box[i]
            box = np.int0(box)
            for j in range(len(self.neutral)):
                print("i=====", i)
                if i == self.neutral[j]:
                    cv.drawContours(self.img, [box], 0, (0, 255, 0), 3)
        cv.imshow('Neutral', self.img)
        cv.waitKey()
        cv.destroyAllWindows()

    def drawKobb(self):
        """ОТРИСОВКА КОББА"""
        for i in range(len(self.neutral) - 1):
            ilower = self.neutral[i]
            iupper = self.neutral[i + 1]
            upoint1 = self.box[iupper][0][0]
            upoint2 = self.box[iupper][0][1]
            dpoint1 = self.box[ilower][0][0]
            dpoint2 = self.box[ilower][0][1]
            icenter = self.kink[i]
            cpoint1, cpoint2 = self.center[icenter][0], self.center[icenter][1]
            y_intersection = self.Kobb_intersection[i][1]
            x_intersection = self.Kobb_intersection[i][0]
            print("iupper", upoint1)
            print("ilower", dpoint1)
            print("y_intersection", y_intersection)
            # cv.line(self.img,(np.float32(upoint1),np.float32(y_intersection)),(np.float32(dpoint1),np.float32(y_intersection)),(0,0,255),3)
            cv.line(self.img, (np.float32(upoint1), np.float32(upoint2)),
                    (np.float32(x_intersection), np.float32(y_intersection)), (0, 0, 255), 2)
            cv.line(self.img, (np.float32(dpoint1), np.float32(dpoint2)),
                    (np.float32(x_intersection), np.float32(y_intersection)), (0, 0, 255), 2)
            if cpoint1 > x_intersection:
                cv.putText(self.img, "%f" % self.scoliosis_angle_Kobb[i],
                           (np.float32(cpoint1 - 300), np.float32(y_intersection)), cv.FONT_HERSHEY_SIMPLEX, 1,
                           (0, 0, 255), 1)
            elif cpoint1 < x_intersection:
                cv.putText(self.img, "%f" % self.scoliosis_angle_Kobb[i],
                           (np.float32(cpoint1 + 30), np.float32(y_intersection + 50)), cv.FONT_HERSHEY_SIMPLEX, 1,
                           (0, 0, 255), 1)
        cv.imshow('drawKobb', self.img)
        cv.waitKey()
        cv.destroyAllWindows()

    def drawFerg(self):
        """ОТРИСОВКА ФЕРГЮСОНА"""
        for i in range(len(self.neutral) - 1):
            ilower = self.neutral[i]
            iupper = self.neutral[i + 1]
            icenter = self.kink[i]
            dpoint1, dpoint2 = self.center[ilower][0], self.center[ilower][1]
            print("dpoint1,dpoint2", dpoint1, dpoint2)
            cpoint1, cpoint2 = self.center[icenter][0], self.center[icenter][1]
            print("cpoint1,cpoint2", cpoint1, cpoint2)
            upoint1, upoint2 = self.center[iupper][0], self.center[iupper][1]
            cv.line(self.img, (np.float32(dpoint1), np.float32(dpoint2)),
                    (np.float32(cpoint1), np.float32(cpoint2)), (0, 0, 255), 2)
            cv.line(self.img, (np.float32(cpoint1), np.float32(cpoint2)),
                    (np.float32(upoint1), np.float32(upoint2)), (0, 255, 0), 2)
            cv.putText(self.img, "%f" % self.scoliosis_angle_Fergusson[i],
                       (np.float32(cpoint1 + 50), np.float32(cpoint2)),
                       cv.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 1)
            cv.imshow('drawFerg', self.img)
            cv.waitKey()
            cv.destroyAllWindows()

    def drawMinAreaRect(self):
        """ОТРИСОВКА МИНИМАЛЬНЫХ ОПИСЫВАЮШИХ ПРЯМОУГОЛЬНИКОВ"""
        for i in range(self.lengtn):
            box = self.box[i]
            box = np.int0(box)
            cv.drawContours(self.img, [box], 0, (0, 0, 255), 2)
        cv.imshow('MinAreaRect', self.img)
        cv.waitKey()
        cv.destroyAllWindows()

    def drawAngleScol(self):
        cv.putText(self.img, "%d angle" % (np.int0(self.scoliosis_angle_Kobb[0])),
                   (np.int0(self.center[6][0] + 50), np.int0(self.center[6][1])), cv.FONT_HERSHEY_SIMPLEX, 1,
                   (76, 76, 76), 2)
        cv.putText(self.img, "%d angle" % (np.int0(self.scoliosis_angle_Kobb[1])),
                   (np.int0(self.center[10][0] + 50), np.int0(self.center[10][1])), cv.FONT_HERSHEY_SIMPLEX, 1,
                   (76, 76, 76), 2)
        cv.imshow("an", self.img)
        cv.waitKey()
        cv.destroyAllWindows()


angle_list_Kobb = []

SD = spine_analizer("0.png")
SD.calculate_angle()
SD.calculate_neutral_kink()
SD.calculate_scoliosis_angle_Kobb()
SD.calculate_scoliosis_angle_Ferguson()
